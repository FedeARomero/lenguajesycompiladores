Dada la siguiente gramática con elementos terminales fin , := y exp

P -> L fin
L -> L , I
L -> I
I -> id := exp

a) Hacer el parsing ascendente
b) Hacer el árbol de parsing y devolver la lista de reglas para la hilera : id,id,id,id:=exp;
c) Probar con FLEX y BISON y comparar la lista de reglas obtenida

Se agrega la regla: S -> P (start)

Primeros

P(P) = { id }
P(L) = { id }
P(I) = { id }

Siguientes

S(S) = { $ }
S(P) = { $ }
S(L) = { fin , }
S(I) = { fin , }

------------------

Estado 0:
  S -> .P
  P -> .L fin
  L -> .L , I
  L -> .I
  I -> .id := exp

0 => P  => 1
  => L  => 2
  => I  => 3
  => id => 4

------------------

Estado 1:
  S -> P.

Estado 2:
  P -> L .fin
  L -> L ., I

Estado 3:
  L -> I.

Estado 4:
  I -> id .:= exp

2 => fin => 5
  => ,   => 6

4 => :=  => 7

------------------

Estado 5:
  P -> L fin.

Estado 6:
  L -> L , .I
  I -> .id := exp

Estado 7:
  I -> id := .exp

6 => I   => 8
  => id  => 4

7 => exp => 9

------------------

Estado 8:
  L -> L , I.

Estado 9:
  I -> id := exp.
